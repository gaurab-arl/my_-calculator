#include <iostream>
#include <stack>   // For the stack data structure to store numbers and operators
#include <cmath>   // For power (^) function
#include <cstdlib> // For exit()

using namespace std;

// Function to determine if a character is an operator (+, -, *, /, ^)
bool isOperator(char op) {
    return (op == '+' || op == '-' || op == '*' || op == '/' || op == '^');
}

// Function to return precedence of operators
int precedence(char op) {
    if (op == '+' || op == '-') return 1;  // Lowest precedence for + and -
    if (op == '*' || op == '/') return 2;  // Higher precedence for * and /
    if (op == '^') return 3;               // Highest precedence for ^
    return 0;
}

// Function to apply an operator (like + or *) on two operands (like 3 + 5)
float applyOperator(float a, float b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': 
            if (b != 0) return a / b;  // Avoid division by zero
            else {
                cout << "Error: Division by zero!" << endl;
                exit(1);  // Exit the program on error
            }
        case '^': return pow(a, b);  // Exponentiation (a^b)
        default: return 0;  // Default case (should never happen)
    }
}

// Function to evaluate an arithmetic expression
float evaluate(string expression) {
    stack<float> values;  // Stack to store numbers
    stack<char> ops;      // Stack to store operators
    
    for (size_t i = 0; i < expression.length(); i++) {
        // Ignore spaces in the expression
        if (expression[i] == ' ') continue;

        // If it's a number, parse and push it to the values stack
        if (isdigit(expression[i])) {
            float value = 0;
            // Read multiple digits if the number has more than one (e.g., 12)
            while (i < expression.length() && isdigit(expression[i])) {
                value = value * 10 + (expression[i] - '0');
                i++;
            }
            values.push(value);  // Push the number onto the stack
            i--; // Adjust the index since we may have moved too far
        }
        // Handle opening parenthesis '('
        else if (expression[i] == '(') {
            ops.push(expression[i]);  // Push '(' onto the operators stack
        }
        // Handle closing parenthesis ')' and evaluate the expression inside it
        else if (expression[i] == ')') {
            // Evaluate until the corresponding '(' is found
            while (!ops.empty() && ops.top() != '(') {
                float val2 = values.top();
                values.pop();
                
                float val1 = values.top();
                values.pop();
                
                char op = ops.top();
                ops.pop();
                
                values.push(applyOperator(val1, val2, op));  // Apply the operator
            }
            ops.pop();  // Remove '(' from the stack
        }
        // If it's an operator (+, -, *, /, ^)
        else if (isOperator(expression[i])) {
            // While the top of the operators stack has an operator with higher precedence, apply it
            while (!ops.empty() && precedence(ops.top()) >= precedence(expression[i])) {
                float val2 = values.top();
                values.pop();
                
                float val1 = values.top();
                values.pop();
                
                char op = ops.top();
                ops.pop();
                
                values.push(applyOperator(val1, val2, op));
            }
            ops.push(expression[i]);  // Push the current operator to the stack
        }
    }

    // Apply any remaining operators
    while (!ops.empty()) {
        float val2 = values.top();
        values.pop();
        
        float val1 = values.top();
        values.pop();
        
        char op = ops.top();
        ops.pop();
        
        values.push(applyOperator(val1, val2, op));
    }

    return values.top();  // The final result
}

// Main function to interactively get user input
int main() {
    cout << "Welcome to the Interactive Calculator!" << endl;
    cout << "You can enter expressions with +, -, *, /, ^ operators." << endl;
    cout << "To exit the program, type 'quit'." << endl;
    
    while (true) {
        string expression;
        
        cout << "\nEnter your expression (e.g., 3 + 5 * 2): ";  // Prompt for input
        getline(cin, expression);  // Read the input from the user
        
        // Check if the user wants to quit
        if (expression == "quit") {
            cout << "Exiting the calculator. Goodbye!" << endl;
            exit(0);  // Exit the program
        }

        // Evaluate the expression and print the result
        float result = evaluate(expression);
        cout << "Result: " << result << endl;
    }

    return 0;
}
